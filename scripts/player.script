require "modules.internals.math"

local constants = require "modules.internals.constants"

-- the max speed on ground
go.property("max_ground_speed", 100)
-- the max speed in air
go.property("max_air_speed", 80)
-- the max speed while falling
go.property("max_fall_speed", 500)

-- the gravity acting on the player
go.property("gravity", -500)
-- the speed at which the player jumps
go.property("jump_takeoff_speed", 240)

local SPRITE = "#sprite"

local ANIM_WALK = hash("player_walk")
local ANIM_IDLE = hash("player_idle")
local ANIM_JUMP = hash("player_jump")
local ANIM_FALL = hash("player_fall")

function init(self)
  msg.post(".", "acquire_input_focus")

  self.velocity = vmath.vector3()
  self.direction = 1
  self.ground_contact = true
  self.previous_ground_contact = true
  self.anim = nil
end

local function play_animation(self, anim)
  if self.anim ~= anim then
    self.anim = anim
    sprite.play_flipbook(SPRITE, anim)
  end
end

local function update_animations(self)
  sprite.set_hflip(SPRITE, self.direction == -1)

  if self.ground_contact then
    if self.velocity.x == 0 then
			play_animation(self, ANIM_IDLE)
		else
			play_animation(self, ANIM_WALK)
		end
  else
    if self.velocity.y > 0 then
			play_animation(self, ANIM_JUMP)
		else
			play_animation(self, ANIM_FALL)
		end
  end
end

local function decelerate(v, f, dt)
	local opposing = math.abs(v * f)
	if v > 0 then
		return math.floor(math.max(0, v - opposing * dt))
	elseif v < 0 then
		return math.ceil(math.min(0, v + opposing * dt))
	else
		return 0
	end
end

function update(self, dt)
  self.velocity.y = self.velocity.y + self.gravity * dt
  self.velocity.y = math.clamp(self.velocity.y, -self.max_fall_speed, self.max_fall_speed)

  if self.ground_contact then
    self.velocity.x = decelerate(self.velocity.x, 20, dt)
		self.velocity.x = math.clamp(self.velocity.x, -self.max_ground_speed, self.max_ground_speed)
	else
		self.velocity.x = decelerate(self.velocity.x, 1, dt)
		self.velocity.x = math.clamp(self.velocity.x, -self.max_air_speed, self.max_air_speed)
	end

	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)

	update_animations(self)

	self.previous_ground_contact = self.ground_contact
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false
end

-- https://defold.com/manuals/physics/#resolving-kinematic-collisions
local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- collided with a wall
	-- stop horizontal movement
	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	-- collided with the ground
	-- stop vertical movement
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	-- collided with the ceiling
	-- stop vertical movement
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == constants.CONTACT_POINT_RESPONSE then
		-- check that the object is something we consider an obstacle
		if message.group == constants.GROUND then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

local function jump(self)
	-- only allow jump from ground
	-- (extend this with a counter to do things like double-jumps)
	if self.ground_contact then
		-- set take-off speed
		self.velocity.y = self.jump_takeoff_speed
		-- play animation
		play_animation(self, ANIM_JUMP)
		self.ground_contact = false
	end
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

local function walk(self, direction)
	if direction ~= 0 then
		self.direction = direction
	end
	if self.ground_contact then
		self.velocity.x = self.max_ground_speed * direction
	else
		-- move slower in the air
		self.velocity.x = self.max_air_speed * direction
	end
end

function on_input(self, action_id, action)
	if action_id == constants.KEY_A then
		walk(self, -action.value)
	elseif action_id == constants.KEY_D then
		walk(self, action.value)
	elseif action_id == constants.KEY_W then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
end
